// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client-generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  projects      Project[]
  libSessions   LibSession[]
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@index([email], name: "email")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String  @id
  name        String?
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])
}

model LibAuthenticationFlow {
  preAuthenticationToken String                     @id // a random token generated by the server, and shared with the libray. This token is the key the library will use to obtain the final access/refersh tokens
  userCode               String                     @unique // a random, short token generated by the server. The user will then be redirected to [app]/auth/?userCode=[userCode]. At that URL, the user can log in via credentials, or if they're already logged in, they'll be asked whether to grant the library permission to edit projects
  createdAt              DateTime                   @db.Timestamptz() // the time the flow started. If older than a certain interval, the flow is considered expired/
  lastCheckTime          DateTime                   @db.Timestamptz() // the time the client last checked the status of this flow. If shorter than a certain interval, the client will be told to slow down.
  clientFlowToken        String // a random token generated by the client. It'll be returned once the final access/refresh tokens are generated, so the client can make sure the tokens belong to the authentication flow it initiated
  state                  LibAuthenticationFlowState @default(initialized)
  tokens                 String // will be non-empty if state=1. It'll contain a json object containing access/refresh tokens
}

enum LibAuthenticationFlowState {
  initialized
  userAllowedAuth
  userDeniedAuth
  tokenAlreadyUsed
}

model LibSession {
  refreshToken String   @id
  createdAt    DateTime @db.Timestamptz()
  validUntil   DateTime @db.Timestamptz()
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}
